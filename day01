【Day 1】
1.环境搭建
anaconda环境配置
解释器
---------------------------
python初体验
print and input
---------------------------
python基础讲解
python变量特性+命名规则
注释方法
python中“：”作用
学会使用dir( )及和help( )
import使用
pep8介绍
---------------------------
python数值基本知识
python中数值类型，int，float，bool，e记法等
算数运算符
逻辑运算符
成员运算符
身份运算符
运算符优先级
---------------------------
string字符串
定义及基本操作（+，*，读取方式）
字符串相关方法
字符串格式化问题
------------------------------------------------------------------------------------
【作业】
学习代码分享，200-300行要求。
作业：要求用户依次输入姓名，性别，年龄，并对用户信息进行输出格式如下：您的姓名是：***，您的性别是：***，您是***年出生的。
------------------------------------------------------------------------------------
【作业提交】
1.代码文件链接分享到群
截至日期：2019年1月26日晚22：00
注意：未完成将被清退
------------------------------------------------------------------------------------

1、python初体验
print ("hello world!")
a = input("input:")
input:123
type(a)   //<class str>

python2.xf与python3.x版本的输出结果不一样。

2、基础讲解

2、1 变量特性与命名规则
   变量特性：
      变量赋值表达式返回值为None（python中的一种特殊的数据类型，表示空类型）
       a = 2  无out[]的输出结果
      变量的值和类型没有任何限制，可随时更改。
       a = 2     a = "ab"
      可以使用表达式给变量赋值
       a = 4*3
      可以一次给多个变量赋值
       a,b = 1,3
       
    命名规则：
      普通变量：全小写字母，单词之间使用下划线分割。如my_var
      全局变量：全大写字母，单词之间使用下划线分割，如MY_CONST
      类名：首字母大写，大驼峰命名，如MyClass
      普通函数：与普通变量一样。
      模块名：全小写字母，不使用下划线。
      
2、2 注释方法
  python中单行注释采用 # 开头
  python中多行注释采用三个单引号或者双引号。
  
2、3 python中“：”作用
  ：表示代码块，代码组，Python中没有花括号，因此使用缩进和冒号来区分和标识。
  
2、4学会使用dir( )及和help( )
  dir（）：查看一个模块中包含的对象
  dir（ex2）   # 带参数则输出该参数模块的所有对象 ['_name_','my_sum']
  dir（）      #不带参数则输出当前已定义的所有变量。
  
2、5 import使用
  import 模块的导入
  import math
  math.sqrt(16)
  
  import sys
  sys.maxint  #2147483647
  
2、6 pep8介绍
  Python 的代码风格由 PEP 8 描述。这个文档描述了 Python 编程风格的方方面面。
  在遵守这个文档的条件下，不同程序员编写的 Python 代码可以保持最大程度的相似风格。这样就易于阅读，易于在程序员之间交流。
  说白了就是一个命名和开发规范。
  
  
3、python数值

3、1 python中数值类型
  Python的数字类型主要有整形，长整型，浮点型，复数型和布尔型。
  type(3)
  <type 'int'>
  --------------
  type(100000000L)
  <type 'long'>
  --------------
  type(3.0)
  <type 'float'>
  --------------
  type(3+3i)
  <type 'complex'>
  --------------
  type(True)
  <type 'bool'>
  --------------
   
3.2 算数运算符
 +  1+2   #3
 _  2_1   #1
 *  2*1   #2
 /  3/2   #1.5
 %  3%2   #1
 // 9//2  #4
3.3 逻辑运算符
  and  布尔与  x and y 如果x为false ，则返回false，否则返回y的计算值。
     a = 1
     b = 2
     a and b   #2
  or   布尔或  x or y  如果x为true ，则返回true，否则返回y的计算值。
     a = 1
     b = 2
     a or b   #true
  not  布尔非  x not y  如果x为true ，则返回false，如果x为false ，则返回true
     a = 1
     b = 2
     a not b   #false
3.4 身份运算符
  in   如果在指定的序列中找到指定的值则返回TRUE，否则返回false
    a = 10
    b = 20
    list = [1, 2, 3, 4, 5 ];
    a in list
  not in   如果在指定的序列中没找到指定的值则返回TRUE，否则返回false
    a = 10
    b = 20
    list = [1, 2, 3, 4, 5 ];
    b not in list
3.5 成员运算符
  is      判断两个标识符是否引用自同一个对象
    a = 10
    b = 20
    b is a
  is not  判断两个标识符是否引用自不同对象
    a = 10
    b = 20
    b is not a
3.6 运算符优先级
  优先级从高到低：
    （），
    **
    *,/,//,%
    +，—
    不同优先级的组合按照优先级次序进行，同一优先级按照先后次序计算。


4.string字符串

4.1 定义及基本操作（+，*，读取方式）
  定义：是由多个或零个字符组成的有限序列。
  字符串的生成：
    print("hello world")
    print('hello world')
  基本操作：
     加法操作（字符串拼接）：
     a = "hello"+"world"
     print(a)
     
     数乘操作：
     a = "hello"*3
     print(a)    #"hellohellohello"
     
     字符串长度：
     a = 'hellokitty'
     len(a)     # 10
4.2字符串相关方法
   .split()方法   #分割
   
     不带参数情况：
     line = "1 2 3 4 5"
     a = line.split()
     print(a)   #['1','2','3','4','5']
   
     带参数情况：
     line = "1，2，3，4，5"
     a = line.split(',',2)   #使用逗号进行分割，最大分割次数为2
     print(a)   #['1','2','3,4，5']
     
   .join()方法      #连接
     a = ['1','2','3','4','5']
     s = ':'
     s.join(a)
     print(s.join(a))    #'1:2:3:4:5'
     
   .replace方法：
     s = 'hello world'
     print(s.replace('world', 'python'))  #'hello python'
     
     s = '1 2 3 4 5'
     print(s.replace('',":",1))   #'1:2 3 4 5'
     
   .upper()和.lower()方法
     s = 'Hello'
     s.upper()
     s.lower()
   
   .strip()方法
     s = '   hello world   '
     s.strip()      #'hello world'      #去除两端空格
     s.rstrip()     #'   hello world'   #去除右空格
     s.lstrip()     #'hello world   '   #去除左空格
   
4.3 字符串格式化问题
   百分号格式化输出：
      常用的控制符：
         %s   表示字符串
         %d   表示整数
         %f   表示浮点数
      name, age = 'tom',10    
      '%s is %d years old' %(name,age) 
      'tom is 10 years old'
      
   .format()方法
      '{} is {} years old' .format(name,age) 
      'tom is 10 years old'
      使用.format()方法时，字符串中的花括号会被传入的参数依次替代。  
    
    
作业：要求用户依次输入姓名，性别，年龄，并对用户信息进行输出格式如下：您的姓名是：***，您的性别是：***，您是***年出生的。

name = input('请输入您的姓名：')

sex = input('请输入您的性别：')

age = input('请输入您的年龄：')

print('您的姓名是：{}，您的性别是：{}，您是{}年出生的：{}'.format(name,sex,2019-int（age)）)
