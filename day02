【Day 2】
基础
列表
标志
基本操作(创建，append( )，pop( ) ,del( ), 深浅拷贝）
列表相关方法
元组
标志
基本操作（创建及不可变性）
提升
序列类型，相互转换及方法
【作业构想】
学习代码200-300行
定义一个列表，包含自己的家庭成员，并在指定位置插入给定元素，例如你的男女朋友名称等。再将男女朋友名字移除等操作。
----------------------------------------------------------------
【作业提交】
1.代码文件链接分享到群
截至日期：2019年1月27日晚22：00
注意：未完成将被清退
------------------------------------------------------------------ 
【点评】
第一天点评截止时间1月27晚12点
注意：未完成将被清退


1.列表
1.1 标志
  标志：列表是一个有序的python对象序列，以一个方括号内的逗号分隔值出现。
1.2列表相关操作
  列表生成：
    使用[]生成：l = [1,2.0,3,'hello']
    空列表直接用[]表示： l = []
    使用list（）函数生成：l = list（）
  列表的添加：
    list = [10,11,13]
    list.append(11)         #[10,11,13,11]
    list.append([12,13])    #[10,11,13，[12,13]]
     .append()方法每次只会向列表中添加一个元素，如果这个元素是一个序列，则不会将其展开。
   
  .pop()方法
    .pop()方法将列表中指定索引处的元素删除，并返回这个元素值。
    list = [10,11,13]
    list.pop(2)             #13
    print(list)             #[10,11]
    
    .pop()方法支持负数索引的弹出。
    list = [10,11,13]
    list.pop(-1)           
    
  del python关键字删除元素
    list = [10,11,13]
    del list[0]
    print(list)             #[11,13]
    
    del 支持切片删除(不包括索引的位置)
    list = [10,11,13,14,16]
    del list[1:]            #[10]
    del list[::2]           #[11,14]
    
   深拷贝和浅拷贝
   浅拷贝：
       使用列表内置的copy方法，是将新列表中的元素指向了与原列表相同的内存空间。但是，如果列表中嵌套了列表，拷贝后的列表中嵌套的列表元素指针，指向原列表中嵌套列表的整体地址，而不是指向嵌套列表中元素的内存地址
       s = [[1,2],3,4]
       s1 = s.copy()
       print(s)          #[[1,2],3,4]
       print(s1)         #[[1,2],3,4]
       
       s1[1] = 'hello'
       s1[0][1] = 'world'
       print(s)          #[[1,'world'],3,4]
       print(s1)         #[[1,2],'hello',4]
       
       浅拷贝只能拷贝最外层,即指向内存地址，修改内层则原列表和新列表都会变化，这就是浅拷贝。
    
    
    深拷贝：
        如果希望拷贝后的列表拥有完全独立的内存空间，新旧裂变互补干扰，则需要一个新的方法深拷贝来实现。
        import  copy
        s = [[1,2],3,4]
        s2 = copy.deepcopy(s) 
        s2[0][1] = 'abc'
        print('列表s：',s)             #列表s： [[1, 2], 3, 4]
        print('列表s2：',s2)           #列表s2： [[1, 'abc'], 3, 4]
        
     深浅拷贝的区别就是在于第二层地址的指向不同。相关参考链接：https://www.cnblogs.com/pyramid1001/p/5844905.html
     
1.3 列表的相关方法
   .insert()方法   在指定的位置上插入一个元素。
    list = [10,11,13]
    list.insert([2,'a'])             
    print(list)             #[10,11,'a']
    
   .remove()方法   删除第一个元素
    list = [10,11,13]
    list.remove()           
    print(list)             #[11,13]
    
   .sort()方法     对列表进行排序
    list = [10,9,13]
    list.sort()             
    print(list)             #[9,10,13]
    
    
   .reverse()方法  反转列表
    list = [10,11,13]
    list.reverse()             
    print(list)             #[13，11，10]
    
    
2 元组
2.1标志
   元组：与列表类似的序列类型，只是元组在创建之后就不能改变，也就可以将元组看成是一个不可变的列表。
2.2元组的基本操作
2.2.1元组的生成
   使用一对括号生成元组，以逗号隔开。
   a = (1,2,3,4)
   含有两个或两个以上元素的元组，在构造的时候可以省略括号。
   a = 1，2，3，4
   对于单个元素的元组需在元素后面额外加一个逗号跟数值进行区分，括号也可以
   a = （10，）
   a = 10，
   
2.2.2 元组方法
   .count()
   a = (1,2,3,4)
   a.count(1)     #1
   
   .index()
   a = (1,2,3,4)
   a.count(3)     #2
   
2.3 元组的不可变性
   元组具有不可变性，创建元组之后，不能改变元组的形状，也不能给元组的某个元素重新赋值。但是当元组本身元素可变的情况下，则可以调用该元素的方法来修改元组。
   a = ([1,7],2,3,4)
   a[0].append(6)     #([1,7,6],2,3,4)
   a[0].remove()     #([7],2,3,4)
   
      
3 序列相互转换和方法
  主要的序列类型：列表，元组，字典
  列表的相关方法（上面已经列举过，就不在赘述）：
      .len() .index() .count() .append() .pop() .remove() .sort() .reverse()
  元组的相关方法：
      .index() .count()
      
  字典的相关方法：
      .get() .pop() .update() .keys() .values() .item() 
      
  字符串与列表之间的转换：
  a = 'hello,world' 
  b = list(a)    #字符串->列表
  c = ''.join(b)    #列表->字符串
  print a
  print b
  print c
  
  元组和列表之间的转换：
  li = [1,2,3]
  tu = tuple(li)    #列表->元组
  New_li = list(tu)    #元组->列表
  
  字符串和元组之间的转换：
    a = 'hello,world'
    b = tuple(a)    #字符串->元组
    c = ''.join(b)    #元组->字符串
    print a
    print b
    print c

4.作业
family = ['father',''mother','brother']
family.append('grandfather')
family.insert(2,'girlfriend')
family.remove()
family.pop(3)


     
     
    
